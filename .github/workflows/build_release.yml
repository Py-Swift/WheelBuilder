# This is a basic workflow to help you get started with Actions

name: Build WB Release

# Controls when the workflow will run
on:
  push:
   tags: ['*']

  # Allows you to run this workflow manually from the Actions tab
  #workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  mainjob1:
    #runs-on: macos-13
    runs-on: macos-15
    #runs-on: self-hosted
    outputs:
      sha: ${{ steps.shasum.outputs.var }}
      version: ${{ steps.version.outputs.var }}

    permissions:
      contents: write
      
    steps:
      # - name: Setup Xcode version
      #   uses: maxim-lobanov/setup-xcode@v1.6.0
      #   with:
      #     xcode-version: 16.2
      - uses: actions/checkout@v5

      - name: Build x86_64    
        run: swift build -c release --disable-sandbox --arch x86_64 --product WheelBuilderCLI
      
      - name: Build arm64    
        run: swift build -c release --disable-sandbox --arch arm64 --product WheelBuilderCLI


      - name: Build Release    
        run: | 
              X64BIN=".build/x86_64-apple-macosx/release/WheelBuilderCLI"
              ARMBIN=".build/arm64-apple-macosx/release/WheelBuilderCLI"
              
              mkdir release
              lipo -create $X64BIN $ARMBIN -output release/WheelBuilderCLI
              #cp -rf .build/apple/Products/Release/PSProjectCLI release/PSProject
              #cp -rf .build/x86_64-apple-macosx/release/PSProjectGenerator_PSProjectGen.bundle release/
              cp -rf .build/x86_64-apple-macosx/release/Python.framework release/
              tar -C ./release/ -czvf ./WheelBuilderCLI.tar.gz ./    
      
      - name: Set SHA256
        id: shasum
        run: |
          echo "var=$(shasum -a 256 ./WheelBuilderCLI.tar.gz | awk '{printf $1}')" >> $GITHUB_OUTPUT

      - name: Set Version
        id: version
        run: |
            echo "var=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
      
      - uses: ncipollo/release-action@v1
        with:
          artifacts: "WheelBuilderCLI.tar.gz"
          token: ${{ secrets.Homebrew }}
          allowUpdates: true
        
  # mainjob2:
  #   needs: mainjob1
  #   runs-on: ubuntu-latest

  #   steps:

  #     - uses: actions/checkout@v3

  #     - name: retrieve output
  #       run: |
  #         echo "${{ needs.mainjob1.outputs.version }}"
  #         echo "${{ needs.mainjob1.outputs.sha }}"

      
  #     - name: setup python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10' # install the python version needed

  #     - name: install python packages
  #       run: |
  #         python3 -m pip install --upgrade pip
  #         #pip3 install cookiecutter
        
  #     - name: generate formula
  #       run: |
  #         mkdir homebrew_formula
  #         python3.10 generate_formula.py ${{ needs.mainjob1.outputs.version }} ${{ needs.mainjob1.outputs.sha }}

  #     - name: clone tools and update
  #       run: |
  #           git clone https://github.com/pythonswiftlink/homebrew-tools
  #           cp -f homebrew_formula/* homebrew-tools/Formula/p/

  #     - name: Pushes to another repository
  #       uses: cpina/github-action-push-to-another-repository@main
  #       env:
  #         API_TOKEN_GITHUB: ${{ secrets.Homebrew }}
  #       with:
  #         source-directory: 'homebrew-tools'
  #         destination-github-username: 'pythonswiftlink'
  #         destination-repository-name: 'homebrew-tools'
  #         user-email: pythonswiftlink@gmail.com
  #         target-branch: master
